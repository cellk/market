class GameController extends Controller {

    var $imagesCollection;
    var $nbLevels;
    var $nbShelves;

    public function indexAction() {
        return $this->render('BAMWebsaverBundle:Contests\Contest:game.html.twig');
    }

    public function ajaxAction(Request $request) {
        if ($request->isMethod('POST')) {
            $score = $request->request->get('score');
            $levelAchieved = $request->request->get('levelAchieved');
            $token = $request->request->get('token');
            $db = $this->dbGameOver($token, $score, $levelAchieved);
            $response = new Response(json_encode($db));
        } else {
            if (is_null($request->query->get('nbShelves')) || is_null($request->query->get('nbLevels'))) {
                die("Variables not defined");
            }

            //$token = $this->dbGameStart();
            $token = "";
            $this->nbShelves = $request->query->get('nbShelves');
            $this->nbLevels = $request->query->get('nbLevels');

            $this->setItemsHTMLClasses();
            $response = new Response(json_encode(array("img" => $this->imagesCollection, "tk" => $token)));
        }


        $response->headers->set('Content-Type', 'application/json');
        $response->headers->set('Access-Control-Allow-Origin', 'http://localhost');
        return $response;
    }

    //Return void
    private function setImages() {
        $images = array(
            array(
                "src" => "bananas.png",
                "win_level" => [1, 2]
            ),
            array(
                "src" => "bell_pepper.png",
                "win_level" => []
            ),
            array(
                "src" => "bokchoy.png",
                "win_level" => []
            ),
            array(
                "src" => "boloni.png",
                "win_level" => []
            ),
            array(
                "src" => "bread.png",
                "win_level" => []
            ),
            array(
                "src" => "brie.png",
                "win_level" => [2]
            ),
            array(
                "src" => "brocoli.png",
                "win_level" => []
            ),
            array(
                "src" => "cans.png",
                "win_level" => []
            ),
            array(
                "src" => "carrot.png",
                "win_level" => []
            ),
            array(
                "src" => "celeri.png",
                "win_level" => []
            ),
            array(
                "src" => "cheese.png",
                "win_level" => [2]
            ),
            array(
                "src" => "cherries.png",
                "win_level" => []
            ),
            array(
                "src" => "chicken.png",
                "win_level" => []
            ),
            array(
                "src" => "chips.png",
                "win_level" => []
            ),
            array(
                "src" => "chocolate.png",
                "win_level" => []
            ),
            array(
                "src" => "coconut.png",
                "win_level" => [2]
            ),
            array(
                "src" => "corn.png",
                "win_level" => []
            ),
            array(
                "src" => "cucumber.png",
                "win_level" => []
            ),
            array(
                "src" => "donut.png",
                "win_level" => []
            ),
            array(
                "src" => "eggplant.png",
                "win_level" => []
            ),
            array(
                "src" => "eggs.png",
                "win_level" => []
            ),
            array(
                "src" => "fish.png",
                "win_level" => []
            ),
            array(
                "src" => "fudgesicle.png",
                "win_level" => []
            ),
            array(
                "src" => "grapes.png",
                "win_level" => []
            ),
            array(
                "src" => "green_apple.png",
                "win_level" => []
            ),
            array(
                "src" => "jam.png",
                "win_level" => []
            ),
            array(
                "src" => "kiwi.png",
                "win_level" => []
            ),
            array(
                "src" => "lemon.png",
                "win_level" => []
            ),
            array(
                "src" => "lettuce.png",
                "win_level" => []
            ),
            array(
                "src" => "milk.png",
                "win_level" => []
            ),
            array(
                "src" => "mushroom.png",
                "win_level" => []
            ),
            array(
                "src" => "onion.png",
                "win_level" => []
            ),
            array(
                "src" => "orange.png",
                "win_level" => []
            ),
            array(
                "src" => "orange_juice.png",
                "win_level" => []
            ),
            array(
                "src" => "packets.png",
                "win_level" => []
            ),
            array(
                "src" => "peanut_butter.png",
                "win_level" => []
            ),
            array(
                "src" => "pear.png",
                "win_level" => []
            ),
            array(
                "src" => "peas.png",
                "win_level" => []
            ),
            array(
                "src" => "pepper.png",
                "win_level" => []
            ),
            array(
                "src" => "pineapple.png",
                "win_level" => []
            ),
            array(
                "src" => "plum.png",
                "win_level" => []
            ),
            array(
                "src" => "potato.png",
                "win_level" => []
            ),
            array(
                "src" => "pumpkin.png",
                "win_level" => []
            ),
            array(
                "src" => "radish.png",
                "win_level" => []
            ),
            array(
                "src" => "red_apple.png",
                "win_level" => []
            ),
            array(
                "src" => "salsa.png",
                "win_level" => []
            ),
            array(
                "src" => "sauce.png",
                "win_level" => []
            )
            ,
            array(
                "src" => "steak.png",
                "win_level" => []
            ),
            array(
                "src" => "strawberry.png",
                "win_level" => []
            ),
            array(
                "src" => "tomato.png",
                "win_level" => []
            ),
            array(
                "src" => "tuna.png",
                "win_level" => []
            ),
            array(
                "src" => "watermelon.png",
                "win_level" => []
            ),
            array(
                "src" => "wieners.png",
                "win_level" => []
            ),
            array(
                "src" => "wine.png",
                "win_level" => []
            ),
            array(
                "src" => "yogurt.png",
                "win_level" => []
            )
        );

        $this->imagesCollection = $images;
    }

    /*
     * Organise items on the shelves, depends on how many shelves do we have and how many images
     * return Array
     */

    private function itemsOnShelves() {
        $images = $this->imagesCollection;
        $totalItems = count($images);
        $index = 0;
        for ($row = 1; $row <= $this->nbShelves; $row++) {
            $shelves[$row] = array();
            for ($items = 0; $items < round($totalItems / $this->nbShelves); $items++) {
                if (isset($images[$index])) {
                    array_push($shelves[$row], $images[$index]);
                    unset($images[$index]);
                }
                $index++;
            }
        }
        return($shelves);
    }

    /*
     * Return void
     * Set classes and ids element allowing js to generate the HTML
     */

    private function setItemsHTMLClasses() {
        $this->setImages();
        $listItems = $this->itemsOnShelves();
        $tempArray = array();
        foreach ($listItems as $key => $shelves) {
            $element = "#shelve" . $key;
            $class = "websaver_shelve" . $key;
            for ($i = 0; $i < count($shelves); $i++) {
                array_push($tempArray, array(
                    "src" => $shelves[$i]["src"],
                    "class" => $class,
                    "element" => $element,
                    "level" => $shelves[$i]["win_level"]
                ));
            }
        }

        $this->setItemsWinLevel($tempArray);
    }

    /*
     * Set html class "gotya" to find each images users should click to win on every levels
     */

    private function setItemsWinLevel($tempArray) {
        for ($l = 1; $l <= $this->nbLevels; $l++) {
            $levelsArray[$l] = array();
            $t = array();
            foreach ($tempArray as $images) {
                //If the images should be clicked in this level
                if (in_array($l, $images["level"])) {
                    $images["class"] = $images["class"] . " gotya";
                }
                array_push($t, $images);
            }
            $levelsArray[$l] = $t;
        }

        $this->imagesCollection = $levelsArray;
    }

    /*
     * @todo : shuffling the array on each shelve per level
     */

    private function shuffleArray() {}

    private function dbGameOver($token, $score, $levelAchieved) {
        $em = $this->getDoctrine()->getManager();
        $game = $em->getRepository('BAMWebsaverBundle:WsGameContest')->findOneBy(array("token" => $token, "updated" => 0));
        if (!$game) {
            return FALSE;
        }

        $game->setDate();
        $game->setScore((int) $score);
        $game->setLevelachieved((int) $levelAchieved);
        $game->setUpdated(1);
        $em->flush();
        return TRUE;
    }

    private function dbGameStart() {
        $token = bin2hex(random_bytes(20));
        $game = new WsGameContest();
        $game->setScore(0);
        $game->setDate();
        $game->setLevelachieved(0);
        $game->setToken($token);
        $game->setUpdated(0);

        $em = $this->getDoctrine()->getManager();
        $em->persist($game);
        $em->flush();
        return $token;
    }

}
